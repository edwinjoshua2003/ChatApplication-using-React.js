{"version":3,"sources":["logo.svg","firebase.js","App.js","reportWebVitals.js","index.js"],"names":["database","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","App","useState","input","setInput","list","setList","username","setUsername","useEffect","name","window","prompt","collection","orderBy","onSnapshot","snapshot","docs","map","doc","id","data","className","message","timestamp","value","onChange","event","target","onClick","preventDefault","chatMessage","FieldValue","serverTimestamp","add","type","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oOAAe,I,aCgBAA,EAHHC,IAASC,cAVE,CACnBC,OAAQ,0CACRC,WAAY,yCACZC,UAAW,yBACXC,cAAe,qCACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAIEC,Y,OCoDNC,MA3Df,WAAgB,IAAD,EACaC,mBAAS,IADtB,mBACNC,EADM,KACCC,EADD,OAEWF,mBAAS,IAFpB,mBAENG,EAFM,KAEAC,EAFA,OAGmBJ,mBAAS,aAH5B,mBAGNK,EAHM,KAGIC,EAHJ,KAwCb,OAnCAC,qBAAU,WACR,IAAMC,EAAOC,OAAOC,OAAO,sBAC3BJ,EAAYE,KACX,IAEHD,qBAAU,WAERnB,EACGuB,WAAW,YACXC,QAAQ,YAAa,OACrBC,YAAW,SAACC,GACXV,EACEU,EAASC,KAAKC,KAAI,SAAAC,GAAG,MAAK,CACxBC,GAAID,EAAIC,GACRC,KAAMF,EAAIE,iBAIjB,IAkBD,sBAAKC,UAAU,MAAf,UACE,kDAECjB,EAAKa,KAAI,gBAAEE,EAAF,EAAEA,GAAF,IAAMC,KAAQE,EAAd,EAAcA,QAAoBb,GAAlC,EAAuBc,UAAvB,EAAkCd,MAAlC,OACR,qBAAaY,UAAU,cAAvB,UAAsCZ,EAAtC,KAA8Ca,IAArCH,MAGX,iCACE,uBACEK,MAAOtB,EACPuB,SAAU,SAAAC,GAAK,OAAIvB,EAASuB,EAAMC,OAAOH,UAE3C,wBAAQI,QA5BM,SAACF,GACnBA,EAAMG,iBAEN,IAAMC,EAAc,CAClBrB,KAAMH,EACNgB,QAASpB,EACTqB,UAAWjC,IAASS,UAAUgC,WAAWC,mBAG3C3C,EAASuB,WAAW,YAAYqB,IAAIH,GAGpC3B,EAAS,KAgByB+B,KAAK,SAAnC,iCChDOC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.898cfd19.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import firebase from \"firebase\";\r\n\r\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyDjIItNe_6n5g5tHQByPRZUgosnClK5eLo\",\r\n    authDomain: \"chat-application-e6c43.firebaseapp.com\",\r\n    projectId: \"chat-application-e6c43\",\r\n    storageBucket: \"chat-application-e6c43.appspot.com\",\r\n    messagingSenderId: \"811111928253\",\r\n    appId: \"1:811111928253:web:6e762ef293108aa26ac2d4\",\r\n    measurementId: \"G-ZDDVRM2QSG\"\r\n  };\r\n\r\nconst app = firebase.initializeApp(firebaseConfig);\r\nconst database = app.firestore();\r\n\r\nexport default database;","import logo from './logo.svg';\nimport { useEffect, useState } from 'react'\nimport './App.css';\nimport database from \"./firebase.js\"\nimport firebase from \"firebase\"\n \n\nfunction App() {\n  const [input, setInput] = useState(\"\");\n  const [list, setList] = useState([]);\n  const [username, setUsername] = useState(\"Anonymous\");\n\n  useEffect(() => {\n    const name = window.prompt(\"Enter a username: \");\n    setUsername(name);\n  }, []);\n\n  useEffect(() => {\n    // this code will run when the APP component mounts\n    database\n      .collection(\"messages\")\n      .orderBy(\"timestamp\", \"asc\")\n      .onSnapshot((snapshot) => {\n        setList(\n          snapshot.docs.map(doc => ({\n            id: doc.id,\n            data: doc.data(),\n          }))\n        );\n      });\n  }, []);\n\n  const sendMessage = (event) => {\n    event.preventDefault(); // DO NOT REFRESH\n    \n    const chatMessage = {\n      name: username,\n      message: input,\n      timestamp: firebase.firestore.FieldValue.serverTimestamp()\n    };\n\n    database.collection(\"messages\").add(chatMessage);\n\n    \n    setInput(\"\");\n  };\n\n  return (\n    <div className=\"app\">\n      <h1>Chat Application</h1>\n\n      {list.map(({id, data: { message, timestamp, name } }) => (\n        <h3 key={id} className=\"chatMessage\">{name}: {message}</h3>\n      ))}\n\n      <form>\n        <input\n          value={input}\n          onChange={event => setInput(event.target.value)}\n        />\n        <button onClick={sendMessage} type=\"submit\">Send Message</button>\n      </form>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}